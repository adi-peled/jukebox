[{"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\pages\\BoxDetails\\BoxDetails.jsx":"1","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\index.js":"2","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\services\\userService.js":"3","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\store\\actions\\userActions.js":"4","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\cmps\\BoxPlayList\\BoxPlayList.jsx":"5","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\cmps\\BoxPreview\\BoxPreview.jsx":"6","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\services\\utilService.js":"7","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\cmps\\SocialLinks\\SocialLinks.jsx":"8","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\cmps\\SongPreview\\SongPreview.jsx":"9","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\services\\socketService.js":"10","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\App.jsx":"11","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\store\\actions\\boxActions.js":"12","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\cmps\\Player\\Player.jsx":"13"},{"size":7326,"mtime":1611737299091,"results":"14","hashOfConfig":"15"},{"size":669,"mtime":1611663042388,"results":"16","hashOfConfig":"15"},{"size":304,"mtime":1611662669005,"results":"17","hashOfConfig":"15"},{"size":2044,"mtime":1611662669006,"results":"18","hashOfConfig":"15"},{"size":2351,"mtime":1611683845173,"results":"19","hashOfConfig":"15"},{"size":1134,"mtime":1611662668990,"results":"20","hashOfConfig":"15"},{"size":326,"mtime":1611662669005,"results":"21","hashOfConfig":"15"},{"size":3046,"mtime":1611662668995,"results":"22","hashOfConfig":"15"},{"size":2144,"mtime":1611683845177,"results":"23","hashOfConfig":"15"},{"size":568,"mtime":1611662669004,"results":"24","hashOfConfig":"15"},{"size":3158,"mtime":1611683708953,"results":"25","hashOfConfig":"15"},{"size":3112,"mtime":1611737286077,"results":"26","hashOfConfig":"15"},{"size":7445,"mtime":1611737324124,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"q1608t",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\pages\\BoxDetails\\BoxDetails.jsx",["59","60","61","62","63","64","65","66"],"\r\nimport React, { useEffect, useState, useCallback } from 'react'\r\nimport { debounce } from 'debounce';\r\n//Scss\r\nimport './BoxDetails.scss'\r\n//Components\r\nimport { CircleLoading } from 'react-loadingg';\r\nimport BoxPlayList from '../../cmps/BoxPlayList/BoxPlayList'\r\nimport Chat from '../../cmps/Chat/Chat'\r\nimport BoxInfo from '../../cmps/BoxInfo/BoxInfo'\r\nimport SocialLinks from '../../cmps/SocialLinks/SocialLinks'\r\nimport AddSong from '../../cmps/AddSong/AddSong'\r\n//Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setCurrSong, removeSong, loadBox, addSong, updateBox, loadBoxChat } from '../../store/actions/boxActions'\r\nimport { toggleLike } from '../../store/actions/userActions'\r\n//Socket\r\nimport { socketService } from '../../services/socketService'\r\nimport { boxService } from '../../services/boxService'\r\n\r\nfunction BoxDetails(props) {\r\n    const { id } = props.match.params\r\n    const box = useSelector(state => state.boxReducer.currBox)\r\n    const { currSong } = useSelector(state => state.boxReducer)\r\n    const user = useSelector(state => state.userReducer.user)\r\n    const dispatch = useDispatch();\r\n    const [screenWidth, setScreenWidth] = useState(window.innerWidth)\r\n    const [showAddSong, setShowAddSong] = useState(false)\r\n    const [isLiked, setIsLiked] = useState(false)\r\n    const [currCmp, setCurrCmp] = useState('BoxPlayList')\r\n    const [showIsTyping, setShowIsTyping] = useState(null)\r\n    const [showJoinedUser, setShowJoinedUser] = useState(null)\r\n    const [showNewSong, setShowNewSong] = useState(null)\r\n    const debounceLoadData = useCallback(debounce(fetchData, 1500), []);\r\n    const [userList, setUserList] = useState(null)\r\n    const [newSong, setNewSong] = useState(null)\r\n\r\n\r\n    function reorder(list, startIndex, endIndex) {\r\n        const result = Array.from(list)\r\n        const [removed] = result.splice(startIndex, 1)\r\n        console.log(startIndex, endIndex.index);\r\n        result.splice(endIndex.index, 0, removed)\r\n        result.filter(val => val)\r\n        box.playList = result;\r\n        if (currSong.videoId !== box.playList[0].videoId) {\r\n            playSong(box.playList[0])\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(loadBox(id))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            const idx = user.favs.findIndex(favBox => favBox._id === id)\r\n            idx === -1 ? setIsLiked(false) : setIsLiked(true)\r\n        }\r\n    }, [user?.favs?.length])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', () => setScreenWidth(window.innerWidth));\r\n        if (user) {\r\n            socketService.emit('join box', { boxId: id, user })\r\n        }\r\n        socketService.on('user is typing', (username) => {\r\n            setShowIsTyping(username)\r\n            debounceLoadData();\r\n        })\r\n        socketService.on('msgSent', () => {\r\n            dispatch(loadBox(id))\r\n        })\r\n        socketService.on('user joined', ({ username, userList }) => onJoinedUser(username, userList))\r\n        socketService.on('user leave', (updateUserList) => {\r\n\r\n            setUserList(updateUserList)\r\n        })\r\n        let counter = 0\r\n        socketService.on('set song', async song => {\r\n\r\n            if (!song) {\r\n                // if (counter) return\r\n                counter++\r\n                const boxId = props.match.params.id\r\n                const box = await boxService.getBoxById(boxId)\r\n                console.log(box, boxId);\r\n                const song = { ...box.playList[0], secPlayed: 0 }\r\n                dispatch(setCurrSong(song))\r\n                socketService.emit('update song', song)\r\n            } else {\r\n                setNewSong(song)\r\n                dispatch(setCurrSong(song))\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', () => setScreenWidth(window.innerWidth))\r\n        }\r\n    }, [user])\r\n\r\n    const onJoinedUser = (username, userList) => {\r\n        setShowJoinedUser(username)\r\n        setUserList(userList)\r\n        setTimeout(() => {\r\n            setShowJoinedUser(null)\r\n        }, 5000)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (!currSong || !newSong) return\r\n        if (newSong.videoId === currSong.videoId) return\r\n        socketService.emit('update song', { ...currSong, isPlaying: !currSong.isPlaying })\r\n\r\n    }, [currSong])\r\n\r\n    async function fetchData() {\r\n        setShowIsTyping(null)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCurrCmp()\r\n    }, [currCmp])\r\n\r\n    function getCurrCmp() {\r\n        if (currCmp === 'Chat' && screenWidth < 850) {\r\n            return <Chat userList={userList} isTyping={isTyping} sendMsg={sendMsg} box={box} />\r\n        } else if (currCmp === 'BoxPlayList') {\r\n            return <BoxPlayList playSong={playSong} deleteSong={deleteSong} box={box} />\r\n        }\r\n    }\r\n\r\n    function playSong(song) {\r\n        if (song.videoId !== currSong?.videoId) {\r\n            song = { ...song, secPlayed: 0 }\r\n        }\r\n        else {\r\n            song = { ...song, isPlaying: song.isPlaying }\r\n        }\r\n        console.log('set curr song play song');\r\n\r\n        dispatch(setCurrSong(song))\r\n        socketService.emit('update song', song)\r\n        // socketService.emit('update song', { ...song, isPlaying: !song.isPlaying })\r\n        setNewSong(song)\r\n    }\r\n    async function deleteSong(songId) {\r\n        dispatch(removeSong(id, songId))\r\n    }\r\n    function onLike() {\r\n        dispatch(toggleLike(user, box, isLiked))\r\n    }\r\n    const onAddSong = (song) => {\r\n        dispatch(addSong(song, id))\r\n        setShowNewSong(song.snippet.title)\r\n        setTimeout(() => {\r\n            setShowNewSong(null)\r\n        }, 3000)\r\n    }\r\n    function sendMsg(data) {\r\n        dispatch(updateBox(data))\r\n        socketService.emit('sendMsg', data)\r\n    }\r\n    function isTyping(box, user) {\r\n        socketService.emit('typing', { box, username: user.username })\r\n    }\r\n\r\n    return (\r\n        <div className=\"box-details\">\r\n            { !box && <CircleLoading />}\r\n            { box && <>\r\n                <div className=\"box-details__container flex \">\r\n                    {screenWidth > 850 && <Chat\r\n                        isTyping={isTyping}\r\n                        userList={userList}\r\n                        sendMsg={sendMsg}\r\n                        box={box}\r\n                        typingUser={showIsTyping}\r\n                        joinedUser={showJoinedUser}\r\n                        newSong={showNewSong}\r\n                    />}\r\n\r\n                    <div className=\"box-details-section2\">\r\n                        <BoxInfo box={box} />\r\n                        <SocialLinks isLiked={isLiked} onLike={onLike} showAddSong={setShowAddSong} setCurrCmp={setCurrCmp} currCmp={currCmp} />\r\n                        {screenWidth > 850 && <BoxPlayList reorder={reorder} playSong={playSong} deleteSong={deleteSong} box={box} />}\r\n                        {screenWidth < 850 && <>{getCurrCmp()}</>}\r\n                    </div>\r\n                </div>\r\n                {showAddSong && <>\r\n                    <AddSong onClose={setShowAddSong} onAddSong={onAddSong} />\r\n                    <div onClick={() => setShowAddSong(false)} className=\"screen\" />\r\n                </>}\r\n            </>}\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default BoxDetails;","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\index.js",[],"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\services\\userService.js",[],["67","68"],"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\store\\actions\\userActions.js",[],["69","70"],"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\cmps\\BoxPlayList\\BoxPlayList.jsx",["71"],"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\cmps\\BoxPreview\\BoxPreview.jsx",["72","73"],"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\services\\utilService.js",[],"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\cmps\\SocialLinks\\SocialLinks.jsx",["74","75","76"],"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\cmps\\SongPreview\\SongPreview.jsx",["77","78","79"],"import React, { useState, useEffect } from 'react'\r\n//Css\r\nimport './SongPreview.scss'\r\n//Components\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\r\nimport equalizer from '../../assets/img/equalizer.gif'\r\n//redux\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nfunction SongPreview({ song, playSong, deleteSong, idx }) {\r\n    const [isRemoving, setIsRemoving] = useState(false)\r\n    const { currSong } = useSelector(state => state.boxReducer)\r\n    const isSongPlaying = (song.id === currSong?.id) && currSong?.isPlaying;\r\n    const isCurrSong = currSong?.id===song.id? true:false;\r\n    function changeIsRemoving() {\r\n        setIsRemoving(!isRemoving)\r\n        setTimeout(() => {\r\n            setIsRemoving(false)\r\n        }, 3000)\r\n    }\r\n    return (\r\n    \r\n            <div className={isCurrSong? \"flex space-between song-preview active\": \"flex space-between song-preview\"} onDoubleClick={() => playSong(song)}>\r\n            <div className=\"song-preview-left flex\">\r\n                {isSongPlaying ? <PauseCircleOutlineIcon className=\"song-preview-svg\" onClick={() => playSong(currSong)} /> :\r\n                    <PlayCircleOutlineIcon className=\"song-preview-svg\" onClick={() => playSong(song)} />}\r\n                <img className=\"song-preview-img\" src={song.imgUrl} />\r\n                <div>{song.name}</div>\r\n            </div>\r\n            <div className=\"song-preview-right flex\">\r\n                <div className=\"song-preview-duration\">{song.duration}</div>\r\n                {isSongPlaying ? <img className=\"equalizer-gif\" src={equalizer} /> : <div className=\"equalizer-gif\"></div>}\r\n                {isRemoving ? <DeleteOutlineOutlinedIcon  onClick={() => deleteSong(song.id)} className=\"song-preview-svg song-preview-svg--delete\" /> : <MoreVertIcon onClick={changeIsRemoving} className=\"song-preview-svg\" />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongPreview\r\n","D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\services\\socketService.js",[],"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\App.jsx",["80","81","82","83","84","85","86","87"],"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\store\\actions\\boxActions.js",[],"D:\\Full Stack web developer projects\\jukebox-full app\\front\\src\\cmps\\Player\\Player.jsx",["88","89","90","91","92","93","94"],"import React, { useState, useEffect, useRef, createRef } from 'react'\r\n//Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setCurrSong, updateProgress } from '../../store/actions/boxActions'\r\n//Scss\r\nimport './Player.scss'\r\n//Components \r\nimport Slider from '@material-ui/core/Slider';\r\nimport ReactPlayer from 'react-player/youtube'\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\r\nimport VolumeDownIcon from '@material-ui/icons/VolumeDown';\r\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\r\n//services\r\nimport { socketService } from '../../services/socketService'\r\n\r\nfunction Player() {\r\n    const dispatch = useDispatch()\r\n    const { currSong } = useSelector(state => state.boxReducer)\r\n    const { currBox } = useSelector(state => state.boxReducer)\r\n    const [volume, setVolume] = useState(0.75)\r\n    const [secPlayed, setSecPlayed] = useState(0)\r\n    const [duration, setDuration] = useState(0)\r\n    const [mute, setMute] = useState(false)\r\n    const [screenWidth, setScreenWidth] = useState(window.innerWidth)\r\n    const [seeking, setSeeking] = useState(false)\r\n    const [newBox, setNewBox] = useState(null)\r\n    const elPlayer = createRef()\r\n\r\n    function skipSong(diff) {\r\n        currBox.playList.forEach((song, index) => {\r\n            if (song.id === currSong.id) {\r\n                if (index + diff >= currBox.playList.length) {\r\n                    dispatch(setCurrSong(currBox.playList[0]))\r\n                    socketService.emit('update song', currBox.playList[0])\r\n                } else if (index + diff < 0) {\r\n                    dispatch(setCurrSong(currBox.playList[currBox.playList.length - 1]))\r\n                    socketService.emit('update song', currBox.playList[currBox.playList.length - 1])\r\n                } else {\r\n                    dispatch(setCurrSong(currBox.playList[index + diff]))\r\n                    socketService.emit('update song', currBox.playList[index + diff])\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', () => setScreenWidth(window.innerWidth));\r\n        if (screenWidth < 850) {\r\n            setVolume(1)\r\n        }\r\n        return () => {\r\n            window.removeEventListener('resize', () => setScreenWidth(window.innerWidth))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (currBox) {\r\n\r\n        }\r\n    }, [currBox])\r\n\r\n    function handleVolumeChange({ target }, newVal) {\r\n        setVolume(parseFloat(newVal))\r\n    }\r\n\r\n    function handleProgress(e) {\r\n        // if (!seeking && !isSyncing) {\r\n        if (!seeking) {\r\n            setSecPlayed(e.playedSeconds)\r\n            // if (currBox._id !== newBox._id) setNewBox(currBox)\r\n            dispatch(updateProgress((e.playedSeconds)))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (currSong) {\r\n            // setSecPlayed(currSong.secPlayed)\r\n            seekTo(currSong.secPlayed)\r\n        }\r\n    }, [currSong])\r\n\r\n    function handleDuration(e) {\r\n        setDuration(e)\r\n    }\r\n\r\n    function pauseSong() {\r\n        dispatch(setCurrSong(currSong))\r\n        socketService.emit('update song', { ...currSong, isPlaying: currSong.isPlaying })\r\n    }\r\n\r\n    function handleMute() {\r\n        setMute(!mute)\r\n    }\r\n\r\n    function seekTo(sec) {\r\n        if(sec!==secPlayed){\r\n            elPlayer.current.seekTo(parseFloat(sec), 'seconds');\r\n        }\r\n    }\r\n\r\n    function handleSeekMouseDown() {\r\n        setSeeking(true)\r\n    }\r\n\r\n    function handleSeekChange({ target }, newVal) {\r\n        setSecPlayed(newVal);\r\n    }\r\n\r\n    function handleSeekMouseUp(e) {\r\n        console.log('lo kore');\r\n        elPlayer.current.seekTo(parseFloat(secPlayed))\r\n        setSeeking(false)\r\n    }\r\n\r\n    function showTime(seconds) {\r\n        var mins;\r\n        var secs;\r\n        if (seconds >= 60) {\r\n            mins = (parseInt(seconds / 60)).toString();\r\n            secs = (parseInt(seconds - mins * 60)).toString().padStart(2, '0');\r\n        } else {\r\n            mins = '0';\r\n            secs = (parseInt(seconds)).toString().padStart(2, '0');\r\n        }\r\n        return `${mins}:${secs}`\r\n    }\r\n    return (\r\n        <div>\r\n            {currSong && <ReactPlayer\r\n                ref={elPlayer}\r\n                className=\"hidden\"\r\n                playsinline={true}\r\n                controls={false}\r\n                playing={currSong.isPlaying}\r\n                url={`https://www.youtube.com/watch?v=${currSong?.videoId}`}\r\n                volume={volume}\r\n                muted={mute}\r\n                onProgress={(e) => handleProgress(e)}\r\n                onDuration={(e) => handleDuration(e)}\r\n                onEnded={() => skipSong(1)}\r\n            />}\r\n            {currSong && <div className={currSong.isPlaying ? \"player bgc-animation\" : \"player \"}>\r\n                <div>\r\n                    <img className=\"player-img\" src={currSong.imgUrl} alt=\"\" />\r\n                    {screenWidth > 850 && <p>{currSong.name}</p>}\r\n                </div>\r\n                {screenWidth > 850 && <div>\r\n                    {showTime(secPlayed)}\r\n                    <Slider className=\"duration-slider\"\r\n                        name=\"played\"\r\n                        min={0}\r\n                        max={duration}\r\n                        onMouseDown={handleSeekMouseDown}\r\n                        onMouseUp={handleSeekMouseUp}\r\n                        onChange={handleSeekChange}\r\n                        onTouchEnd={handleSeekMouseUp}\r\n                        value={secPlayed}\r\n                    />\r\n                    {showTime(duration)}\r\n                </div>}\r\n                {screenWidth < 850 && <div>{showTime(secPlayed)}</div>}\r\n\r\n                <div className=\"player-buttons\">\r\n                    <button onClick={() => skipSong(-1)}>\r\n                        <SkipPreviousIcon />\r\n                    </button>\r\n                    <button onClick={() => pauseSong()}>{currSong?.isPlaying ? <PauseCircleOutlineIcon />\r\n                        : <PlayCircleOutlineIcon />}\r\n                    </button>\r\n                    <button onClick={() => skipSong(1)}>\r\n                        <SkipNextIcon />\r\n                    </button>\r\n                    <button onClick={handleMute}>\r\n                        {mute == true && <VolumeOffIcon />}\r\n                        {mute === false && volume == 0 && <VolumeOffIcon />}\r\n                        {mute === false && volume > 0 && volume < 0.75 && <VolumeDownIcon />}\r\n                        {mute === false && volume >= 0.75 && volume <= 1 && <VolumeUpIcon />}\r\n                    </button>\r\n\r\n                    {screenWidth > 850 && <Slider className=\"volume-slider\"\r\n                        aria-labelledby=\"continuous-slider\"\r\n                        key={`slider`}\r\n                        value={volume}\r\n                        orientation=\"vertical\"\r\n                        min={0}\r\n                        step={0.05}\r\n                        max={1}\r\n                        onChange={handleVolumeChange}\r\n                    />}\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player\r\n\r\n//maor!!",{"ruleId":"95","severity":1,"message":"96","line":15,"column":64,"nodeType":"97","messageId":"98","endLine":15,"endColumn":75},{"ruleId":"99","severity":1,"message":"100","line":34,"column":30,"nodeType":"97","endLine":34,"endColumn":41},{"ruleId":"99","severity":1,"message":"101","line":53,"column":8,"nodeType":"102","endLine":53,"endColumn":10,"suggestions":"103"},{"ruleId":"99","severity":1,"message":"104","line":60,"column":8,"nodeType":"102","endLine":60,"endColumn":28,"suggestions":"105"},{"ruleId":"95","severity":1,"message":"106","line":84,"column":17,"nodeType":"97","messageId":"98","endLine":84,"endColumn":24},{"ruleId":"99","severity":1,"message":"107","line":100,"column":8,"nodeType":"102","endLine":100,"endColumn":14,"suggestions":"108"},{"ruleId":"99","severity":1,"message":"109","line":116,"column":8,"nodeType":"102","endLine":116,"endColumn":18,"suggestions":"110"},{"ruleId":"99","severity":1,"message":"111","line":124,"column":8,"nodeType":"102","endLine":124,"endColumn":17,"suggestions":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"113","replacedBy":"117"},{"ruleId":"115","replacedBy":"118"},{"ruleId":"99","severity":1,"message":"119","line":18,"column":8,"nodeType":"102","endLine":18,"endColumn":10,"suggestions":"120"},{"ruleId":"95","severity":1,"message":"121","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":29},{"ruleId":"122","severity":1,"message":"123","line":16,"column":13,"nodeType":"124","endLine":16,"endColumn":109},{"ruleId":"95","severity":1,"message":"125","line":5,"column":8,"nodeType":"97","messageId":"98","endLine":5,"endColumn":27},{"ruleId":"95","severity":1,"message":"126","line":13,"column":10,"nodeType":"97","messageId":"98","endLine":13,"endColumn":16},{"ruleId":"127","severity":1,"message":"128","line":62,"column":84,"nodeType":"129","endLine":62,"endColumn":99},{"ruleId":"95","severity":1,"message":"130","line":1,"column":27,"nodeType":"97","messageId":"98","endLine":1,"endColumn":36},{"ruleId":"122","severity":1,"message":"123","line":31,"column":17,"nodeType":"124","endLine":31,"endColumn":71},{"ruleId":"122","severity":1,"message":"123","line":36,"column":34,"nodeType":"124","endLine":36,"endColumn":83},{"ruleId":"95","severity":1,"message":"131","line":1,"column":8,"nodeType":"97","messageId":"98","endLine":1,"endColumn":13},{"ruleId":"95","severity":1,"message":"132","line":7,"column":10,"nodeType":"97","messageId":"98","endLine":7,"endColumn":23},{"ruleId":"95","severity":1,"message":"133","line":9,"column":8,"nodeType":"97","messageId":"98","endLine":9,"endColumn":14},{"ruleId":"95","severity":1,"message":"134","line":9,"column":18,"nodeType":"97","messageId":"98","endLine":9,"endColumn":23},{"ruleId":"95","severity":1,"message":"135","line":28,"column":10,"nodeType":"97","messageId":"98","endLine":28,"endColumn":17},{"ruleId":"95","severity":1,"message":"136","line":28,"column":19,"nodeType":"97","messageId":"98","endLine":28,"endColumn":29},{"ruleId":"99","severity":1,"message":"137","line":31,"column":13,"nodeType":"138","endLine":55,"endColumn":4},{"ruleId":"99","severity":1,"message":"139","line":55,"column":6,"nodeType":"102","endLine":55,"endColumn":8,"suggestions":"140"},{"ruleId":"95","severity":1,"message":"141","line":1,"column":38,"nodeType":"97","messageId":"98","endLine":1,"endColumn":44},{"ruleId":"95","severity":1,"message":"142","line":30,"column":12,"nodeType":"97","messageId":"98","endLine":30,"endColumn":18},{"ruleId":"95","severity":1,"message":"143","line":30,"column":20,"nodeType":"97","messageId":"98","endLine":30,"endColumn":29},{"ruleId":"99","severity":1,"message":"119","line":58,"column":8,"nodeType":"102","endLine":58,"endColumn":10,"suggestions":"144"},{"ruleId":"99","severity":1,"message":"145","line":84,"column":8,"nodeType":"102","endLine":84,"endColumn":18,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":178,"column":31,"nodeType":"149","messageId":"150","endLine":178,"endColumn":33},{"ruleId":"147","severity":1,"message":"148","line":179,"column":51,"nodeType":"149","messageId":"150","endLine":179,"endColumn":53},"no-unused-vars","'loadBoxChat' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["151"],"React Hook useEffect has missing dependencies: 'id' and 'user'. Either include them or remove the dependency array.",["152"],"'counter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'debounceLoadData', 'dispatch', 'id', and 'props.match.params.id'. Either include them or remove the dependency array.",["153"],"React Hook useEffect has a missing dependency: 'newSong'. Either include it or remove the dependency array.",["154"],"React Hook useEffect has a missing dependency: 'getCurrCmp'. Either include it or remove the dependency array.",["155"],"no-native-reassign",["156"],"no-negated-in-lhs",["157"],["156"],["157"],"React Hook useEffect has a missing dependency: 'screenWidth'. Either include it or remove the dependency array.",["158"],"'PlayCircleOutlineIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AttachFileSharpIcon' is defined but never used.","'Button' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useEffect' is defined but never used.","'react' is defined but never used.","'socketService' is defined but never used.","'Slider' is defined but never used.","'Range' is defined but never used.","'boolean' is assigned a value but never used.","'setBoolean' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.",["159"],"'useRef' is defined but never used.","'newBox' is assigned a value but never used.","'setNewBox' is assigned a value but never used.",["160"],"React Hook useEffect has a missing dependency: 'seekTo'. Either include it or remove the dependency array.",["161"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"172","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [dispatch, id]",{"range":"179","text":"180"},"Update the dependencies array to be: [id, user, user.favs.length]",{"range":"181","text":"182"},"Update the dependencies array to be: [debounceLoadData, dispatch, id, props.match.params.id, user]",{"range":"183","text":"184"},"Update the dependencies array to be: [currSong, newSong]",{"range":"185","text":"186"},"Update the dependencies array to be: [currCmp, getCurrCmp]",{"range":"187","text":"188"},"Update the dependencies array to be: [screenWidth]",{"range":"189","text":"190"},"Update the dependencies array to be: [dispatch, user]",{"range":"191","text":"192"},{"range":"193","text":"190"},"Update the dependencies array to be: [currSong, seekTo]",{"range":"194","text":"195"},[2240,2242],"[dispatch, id]",[2446,2466],"[id, user, user.favs.length]",[3897,3903],"[debounceLoadData, dispatch, id, props.match.params.id, user]",[4347,4357],"[currSong, newSong]",[4488,4497],"[currCmp, getCurrCmp]",[722,724],"[screenWidth]",[1982,1984],"[dispatch, user]",[2596,2598],[3230,3240],"[currSong, seekTo]"]